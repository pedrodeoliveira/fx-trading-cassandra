CREATE KEYSPACE fx_trading WITH replication = {'class': 'SimpleStrategy', 
'replication_factor': 3};

USE fx_trading;


CREATE TABLE trading_status (dummy INT,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    most_delayed TIMESTAMP,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    highest_mu_pct DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    nbr_instances INT,
    nbr_brokers INT,
    nbr_accounts INT,
    nbr_strategies INT,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    exposures_map MAP<TEXT, DOUBLE>,
    PRIMARY KEY (dummy));

CREATE TABLE trading_results (dummy INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    nbr_closed_positions INT,
    nbr_closed_trades INT,
    max_size INT,
    avg_profit DOUBLE,
    max_profit DOUBLE,
    return DOUBLE,
    itd_return DOUBLE,
    annualized_return DOUBLE,
    PRIMARY KEY (dummy));

CREATE TABLE daily_status (dummy INT,
    date TEXT,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    nbr_instances INT,
    nbr_brokers INT,
    nbr_accounts INT,
    nbr_strategies INT,
    PRIMARY KEY (dummy, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE daily_results (dummy INT,
    date TEXT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    nbr_closed_positions INT,
    nbr_closed_trades INT,
    max_size INT,
    avg_profit DOUBLE,
    max_profit DOUBLE,
    PRIMARY KEY (dummy, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE daily_returns (dummy INT,
    date TEXT,
    equity DOUBLE,
    net_investments DOUBLE,
    return DOUBLE,
    nav DOUBLE,
    itd_return DOUBLE,
    annualized_return DOUBLE,
    PRIMARY KEY (dummy, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE daily_transactions_by_type (type TEXT,
    date TEXT,
    amount DOUBLE,
    PRIMARY KEY (type, date))
WITH CLUSTERING ORDER BY (date DESC);

CREATE TABLE top_brokers_order_unrealized (broker_id TEXT,
    nbr_accounts INT,
    most_delayed TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_trades INT,
    cnt_open_pos INT,
    PRIMARY KEY (broker_id));

CREATE TABLE top_accounts_order_unrealized (account_id TEXT,
    broker_id TEXT,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    net_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_eur DOUBLE,
    gross_open_positions_usd DOUBLE,
    PRIMARY KEY (account_id));

CREATE TABLE top_instances_order_unrealized (instance_id TEXT,
    strategy_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    PRIMARY KEY ( instance_id));

CREATE TABLE top_positions_order_unrealized (position_id TEXT,
    strategy_id TEXT,
    instance_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    symbol TEXT,
    direction TEXT,
    max_size DOUBLE,
    size DOUBLE,
    nbr_trades DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    initial_size DOUBLE,
    expected_profit DOUBLE,
    units_base_ccy DOUBLE,
    units_quote_ccy DOUBLE,
    margin_used DOUBLE,
    margin_next DOUBLE,
    margin_used_next DOUBLE,
    weight_pct DOUBLE,
    PRIMARY KEY (position_id));

CREATE TABLE top_trades_order_unrealized (trade_id TEXT,
    strategy_id TEXT,
    instance_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    position_id TEXT,
    symbol TEXT,
    direction TEXT,
    size DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    open_price DOUBLE,
    last_price DOUBLE,
    pips DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    units_base_ccy DOUBLE,
    units_quote_ccy DOUBLE,
    margin_required DOUBLE,
    margin_used DOUBLE,
    weight_pct DOUBLE,
    PRIMARY KEY (instance_id, trade_id))
WITH CLUSTERING ORDER BY (trade_id ASC);

CREATE TABLE strategy_status (strategy_id TEXT,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    most_delayed TIMESTAMP,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    highest_mu_pct DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    nbr_instances INT,
    nbr_brokers INT,
    nbr_accounts INT,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    exposures_map MAP<TEXT, DOUBLE>,
    PRIMARY KEY (strategy_id));

CREATE TABLE transactions_by_strategy_type (type TEXT,
    strategy_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    instance_id TEXT,
    date TEXT,
    tstamp TIMESTAMP,
    amount DOUBLE,
    transaction_id TEXT,
    comment TEXT,
    PRIMARY KEY ((strategy_id, type), date, tstamp, account_id))
WITH CLUSTERING ORDER BY (date DESC, tstamp DESC, account_id ASC);

CREATE TABLE daily_transactions_by_strategy_type (strategy_id TEXT,
    type TEXT,
    date TEXT,
    amount DOUBLE,
    PRIMARY KEY ((strategy_id, type), date))
WITH CLUSTERING ORDER BY (date DESC);

CREATE TABLE daily_status_by_strategy (strategy_id TEXT,
    date TEXT,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    nbr_instances INT,
    nbr_brokers INT,
    nbr_accounts INT,
    PRIMARY KEY (strategy_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE daily_results_by_strategy (strategy_id TEXT,
    date TEXT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    nbr_closed_positions INT,
    nbr_closed_trades INT,
    max_size INT,
    avg_profit DOUBLE,
    max_profit DOUBLE,
    PRIMARY KEY (strategy_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE daily_returns_by_strategy (strategy_id TEXT,
    date TEXT,
    equity DOUBLE,
    net_investments DOUBLE,
    return DOUBLE,
    nav DOUBLE,
    itd_return DOUBLE,
    annualized_return DOUBLE,
    PRIMARY KEY (strategy_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE monthly_returns_by_strategy (strategy_id TEXT,
    date TEXT,
    return DOUBLE,
    nav DOUBLE,
    equity DOUBLE,
    closed_return DOUBLE,
    return_cum DOUBLE,
    PRIMARY KEY (strategy_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE broker_status (broker_id TEXT,
    nbr_accounts INT,
    nbr_instances INT,
    most_delayed TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    highest_mu_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_trades INT,
    cnt_open_pos INT,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    exposures_map MAP<TEXT, DOUBLE>,
    PRIMARY KEY (broker_id));

CREATE TABLE daily_results_by_broker (broker_id TEXT,
    date TEXT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    nbr_closed_positions INT,
    nbr_closed_trades INT,
    max_size INT,
    avg_profit DOUBLE,
    max_profit DOUBLE,
    PRIMARY KEY (broker_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE instrument_required_margins_by_broker (broker_id TEXT,
    symbol TEXT,
    margin_required DOUBLE,
    PRIMARY KEY (broker_id, symbol))
WITH CLUSTERING ORDER BY (symbol ASC);

CREATE TABLE daily_status_by_broker (broker_id TEXT,
    date TEXT,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    nbr_accounts INT,
    nbr_instances INT,
    PRIMARY KEY (broker_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE accounts (account_id TEXT,
    broker_id TEXT,
    base_ccy TEXT,
    trade_mode TEXT,
    hedge_allowed BOOLEAN,
    hedge_mode TEXT,
    leverage INT,
    inception_date TEXT,
    limit_orders INT,
    margin DOUBLE,
    margin_call DOUBLE,
    stop_out DOUBLE,
    reported TEXT,
    notes TEXT,
    PRIMARY KEY (account_id));

CREATE TABLE account_status (account_id TEXT,
    broker_id TEXT,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    nbr_instances INT,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    exposures_map MAP<TEXT, DOUBLE>,
    PRIMARY KEY (account_id));

CREATE TABLE account_status_by_id_day (strategy_id TEXT,
    date TEXT,
    account_id TEXT,
    broker_id TEXT static,
    tstamp TIMESTAMP,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_free DOUBLE,
    margin_used_pct DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    PRIMARY KEY ((account_id, date), tstamp))
WITH CLUSTERING ORDER BY (tstamp ASC);

CREATE TABLE daily_results_by_account (account_id TEXT,
    broker_id TEXT static,
    date TEXT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    nbr_closed_positions INT,
    nbr_closed_trades INT,
    max_size INT,
    avg_profit DOUBLE,
    max_profit DOUBLE,
    PRIMARY KEY (account_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE daily_status_by_account (account_id TEXT,
    date TEXT,
    broker_id TEXT static,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    nbr_instances INT,
    PRIMARY KEY (account_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE account_returns_by_strategy (strategy_id TEXT,
    account_id TEXT,
    inception_date TEXT,
    investments DOUBLE,
    withdrawals DOUBLE,
    net_investments DOUBLE,
    equity DOUBLE,
    ann_return DOUBLE,
    return_pct DOUBLE,
    PRIMARY KEY (strategy_id, account_id))
WITH CLUSTERING ORDER BY (account_id ASC);

CREATE TABLE transactions_by_account_type (type TEXT,
    account_id TEXT,
    broker_id TEXT static,
    date TEXT,
    tstamp TIMESTAMP,
    amount DOUBLE,
    transaction_id TEXT,
    comment TEXT,
    PRIMARY KEY ((account_id, type), date, tstamp))
WITH CLUSTERING ORDER BY (date DESC, tstamp DESC);

CREATE TABLE instance_status_by_id_day (instance_id TEXT,
    date TEXT,
    strategy_id TEXT static,
    broker_id TEXT static,
    account_id TEXT static,
    tstamp TIMESTAMP,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_free DOUBLE,
    margin_used_pct DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    PRIMARY KEY ((instance_id, date), tstamp))
WITH CLUSTERING ORDER BY (tstamp ASC);

CREATE TABLE instance_status_by_strategy (strategy_id TEXT,
    instance_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    exposures_map MAP<TEXT, DOUBLE>,
    PRIMARY KEY (strategy_id, instance_id))
WITH CLUSTERING ORDER BY (instance_id ASC);

CREATE TABLE instance_status_by_account (strategy_id TEXT,
    instance_id TEXT,
    account_id TEXT,
    broker_id TEXT static,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    exposures_map MAP<TEXT, DOUBLE>,
    PRIMARY KEY (account_id, instance_id))
WITH CLUSTERING ORDER BY (instance_id ASC);

CREATE TABLE instance_returns_by_strategy (strategy_id TEXT,
    instance_id TEXT,
    account_id TEXT,
    inception_date TEXT,
    investments DOUBLE,
    withdrawals DOUBLE,
    net_investments DOUBLE,
    equity DOUBLE,
    ann_return DOUBLE,
    return_pct DOUBLE,
    PRIMARY KEY (strategy_id, instance_id))
WITH CLUSTERING ORDER BY (instance_id ASC);

CREATE TABLE transactions_by_instance_type (type TEXT,
    instance_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    strategy_id TEXT,
    date TEXT,
    tstamp TIMESTAMP,
    amount DOUBLE,
    transaction_id TEXT,
    comment TEXT,
    PRIMARY KEY ((instance_id, type), date, tstamp))
WITH CLUSTERING ORDER BY (date DESC, tstamp DESC);

CREATE TABLE hourly_status_by_instance (instance_id TEXT,
    date_hour TEXT,
    account_id TEXT static,
    broker_id TEXT static,
    strategy_id TEXT static,
    last_update TIMESTAMP,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    PRIMARY KEY (instance_id, date_hour))
WITH CLUSTERING ORDER BY (date_hour ASC);

CREATE TABLE daily_status_by_instance (instance_id TEXT,
    date TEXT,
    account_id TEXT static,
    broker_id TEXT static,
    strategy_id TEXT static,
    last_update TIMESTAMP,
    net_investments DOUBLE,
    balance DOUBLE,
    equity DOUBLE,
    unrealized_profit DOUBLE,
    margin_used DOUBLE,
    margin_used_pct DOUBLE,
    margin_free DOUBLE,
    total_size DOUBLE,
    max_size DOUBLE,
    cnt_open_pos INT,
    cnt_open_trades INT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    net_profit DOUBLE,
    PRIMARY KEY (instance_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE daily_transactions_by_instance_type (instance_id TEXT,
    type TEXT,
    account_id TEXT static,
    broker_id TEXT static,
    strategy_id TEXT static,
    date TEXT,
    amount DOUBLE,
    PRIMARY KEY ((instance_id, type), date))
WITH CLUSTERING ORDER BY (date DESC);

CREATE TABLE logs_by_instance (instance_id TEXT,
    date TEXT,
    tstamp TIMESTAMP,
    strategy_id TEXT static,
    broker_id TEXT static,
    account_id TEXT static,
    log_level TEXT,
    message TEXT,
    PRIMARY KEY (instance_id, date, tstamp))
WITH CLUSTERING ORDER BY (date DESC, tstamp DESC);

CREATE TABLE daily_results_by_instance (instance_id TEXT,
    account_id TEXT static,
    broker_id TEXT static,
    strategy_id TEXT static,
    date TEXT,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    nbr_closed_positions INT,
    nbr_closed_trades INT,
    max_size INT,
    avg_profit DOUBLE,
    max_profit DOUBLE,
    PRIMARY KEY (instance_id, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE account_margins (account_id TEXT,
    broker_id TEXT,
    equity DOUBLE,
    margin_used_broker DOUBLE,
    margin_used_pct DOUBLE,
    margin_used DOUBLE,
    margin_next DOUBLE,
    margin_used_next DOUBLE,
    margin_next_pct DOUBLE,
    margin_used_next_pct DOUBLE,
    PRIMARY KEY (account_id));

CREATE TABLE instruments (symbol TEXT,
    point_scale INT,
    PRIMARY KEY (symbol));

CREATE TABLE symbol_bias_by_day (date TEXT,
    last_update TIMESTAMP,
    symbol TEXT,
    nbr_open_trades INT,
    nbr_longs INT,
    nbr_shorts INT,
    long_units DOUBLE,
    short_units DOUBLE,    
    bias DOUBLE,
    div_index DOUBLE,
    PRIMARY KEY ((date), last_update, symbol))
WITH CLUSTERING ORDER BY (last_update DESC, symbol ASC);

CREATE TABLE symbol_bias_last_update (symbol TEXT,
    last_update TIMESTAMP,
    nbr_open_trades INT,
    nbr_longs INT,
    nbr_shorts INT,
    long_units DOUBLE,
    short_units DOUBLE,
    bias DOUBLE,
    div_index DOUBLE,
    PRIMARY KEY (symbol));

CREATE TABLE instruments_summary_by_strategy (strategy_id TEXT,
    symbol TEXT,
    total_profit DOUBLE,
    avg_profit DOUBLE,
    nbr_closed_positions INT,
    max_size INT,
    PRIMARY KEY (strategy_id, symbol))
WITH CLUSTERING ORDER BY (symbol ASC);

CREATE TABLE oanda_prices_by_symbol (symbol TEXT,
    date TEXT,
    price DOUBLE,
    PRIMARY KEY (symbol, date))
WITH CLUSTERING ORDER BY (date ASC);

CREATE TABLE closed_trades_by_instance (instance_id TEXT,
    close_time TIMESTAMP,
    close_state TEXT,
    trade_id TEXT,
    position_id TEXT,
    broker_id TEXT,
    strategy_id TEXT,
    account_id TEXT,
    symbol TEXT,
    direction TEXT,
    size DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    open_price DOUBLE,
    close_price DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    PRIMARY KEY (instance_id, close_time, trade_id))
WITH CLUSTERING ORDER BY (close_time DESC, trade_id ASC);

CREATE TABLE closed_trades_by_account (instance_id TEXT,
    close_time TIMESTAMP,
    close_state TEXT,
    trade_id TEXT,
    position_id TEXT,
    broker_id TEXT,
    strategy_id TEXT,
    account_id TEXT,
    symbol TEXT,
    direction TEXT,
    size DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    open_price DOUBLE,
    close_price DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    PRIMARY KEY (account_id, close_time, trade_id))
WITH CLUSTERING ORDER BY (close_time DESC, trade_id ASC);

CREATE TABLE closed_trades_by_strategy (instance_id TEXT,
    close_time TIMESTAMP,
    close_state TEXT,
    trade_id TEXT,
    position_id TEXT,
    broker_id TEXT,
    strategy_id TEXT,
    account_id TEXT,
    symbol TEXT,
    direction TEXT,
    size DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    open_price DOUBLE,
    close_price DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    PRIMARY KEY (strategy_id, close_time, trade_id))
WITH CLUSTERING ORDER BY (close_time DESC, trade_id ASC);

CREATE TABLE virtual_stops_by_strategy (instance_id TEXT,
    close_time TIMESTAMP,
    trade_id TEXT,
    position_id TEXT,
    broker_id TEXT,
    strategy_id TEXT,
    account_id TEXT,
    symbol TEXT,
    direction TEXT,
    size DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    open_price DOUBLE,
    close_price DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    PRIMARY KEY (strategy_id, close_time, trade_id))
WITH CLUSTERING ORDER BY (close_time DESC, trade_id ASC);

CREATE TABLE last_week_closed_trades_by_instance (instance_id TEXT,
    close_time TIMESTAMP,
    close_state TEXT,
    trade_id TEXT,
    position_id TEXT,
    broker_id TEXT,
    strategy_id TEXT,
    account_id TEXT,
    symbol TEXT,
    direction TEXT,
    size DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    open_price DOUBLE,
    close_price DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    PRIMARY KEY (instance_id, close_time, trade_id))
WITH CLUSTERING ORDER BY (close_time DESC, trade_id ASC);

CREATE TABLE closed_positions_by_instance (instance_id TEXT,
    broker_id TEXT,
    strategy_id TEXT,
    account_id TEXT,
    close_time TIMESTAMP,
    position_id TEXT,
    symbol TEXT,
    direction TEXT,
    max_size DOUBLE,
    initial_size DOUBLE,
    nbr_trades INT,
    open_time TIMESTAMP,
    duration DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    PRIMARY KEY (instance_id, close_time, position_id))
WITH CLUSTERING ORDER BY (close_time DESC, position_id ASC);

CREATE TABLE closed_positions_by_strategy (instance_id TEXT,
    broker_id TEXT,
    strategy_id TEXT,
    account_id TEXT,
    close_time TIMESTAMP,
    position_id TEXT,
    symbol TEXT,
    direction TEXT,
    max_size DOUBLE,
    initial_size DOUBLE,
    nbr_trades INT,
    open_time TIMESTAMP,
    duration DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    PRIMARY KEY (strategy_id, close_time, instance_id, position_id))
WITH CLUSTERING ORDER BY (close_time DESC, instance_id ASC, position_id ASC);

CREATE TABLE last_week_closed_positions_by_instance (instance_id TEXT,
    broker_id TEXT,
    strategy_id TEXT,
    account_id TEXT,
    close_time TIMESTAMP,
    position_id TEXT,
    symbol TEXT,
    direction TEXT,
    max_size DOUBLE,
    initial_size DOUBLE,
    nbr_trades INT,
    open_time TIMESTAMP,
    duration DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    PRIMARY KEY (instance_id, close_time, position_id))
WITH CLUSTERING ORDER BY (close_time DESC, position_id ASC);

CREATE TABLE open_trades_by_instance (strategy_id TEXT,
    trade_id TEXT,
    instance_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    position_id TEXT,
    symbol TEXT,
    direction TEXT,
    size DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    open_price DOUBLE,
    last_price DOUBLE,
    open_state TEXT,
    pips DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    units_base_ccy DOUBLE,
    units_quote_ccy DOUBLE,
    margin_required DOUBLE,
    margin_used DOUBLE,
    weight_pct DOUBLE,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    PRIMARY KEY (instance_id, trade_id))
WITH CLUSTERING ORDER BY (trade_id ASC);

CREATE TABLE open_trades_by_strategy (strategy_id TEXT,
    trade_id TEXT,
    instance_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    position_id TEXT,
    symbol TEXT,
    direction TEXT,
    size DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    open_price DOUBLE,
    last_price DOUBLE,
    open_state TEXT,
    pips DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    units_base_ccy DOUBLE,
    units_quote_ccy DOUBLE,
    margin_required DOUBLE,
    margin_used DOUBLE,
    margin_next DOUBLE,
    margin_used_next DOUBLE,
    weight_pct DOUBLE,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    PRIMARY KEY (strategy_id, instance_id, trade_id))
WITH CLUSTERING ORDER BY (instance_id ASC, trade_id ASC);

CREATE TABLE open_trades_by_account (strategy_id TEXT,
    trade_id TEXT,
    instance_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    position_id TEXT,
    symbol TEXT,
    direction TEXT,
    size DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    open_price DOUBLE,
    last_price DOUBLE,
    open_state TEXT,
    pips DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    units_base_ccy DOUBLE,
    units_quote_ccy DOUBLE,
    margin_required DOUBLE,
    margin_used DOUBLE,
    margin_next DOUBLE,
    margin_used_next DOUBLE,
    weight_pct DOUBLE,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    PRIMARY KEY (account_id, instance_id, trade_id))
WITH CLUSTERING ORDER BY (instance_id ASC, trade_id ASC);

CREATE TABLE open_positions_by_instance (strategy_id TEXT,
    instance_id TEXT,
    position_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    symbol TEXT,
    direction TEXT,
    max_size DOUBLE,
    size DOUBLE,
    nbr_trades DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    initial_size DOUBLE,
    expected_profit DOUBLE,
    units_base_ccy DOUBLE,
    units_quote_ccy DOUBLE,
    margin_used DOUBLE,
    margin_next DOUBLE,
    margin_used_next DOUBLE,
    weight_pct DOUBLE,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    PRIMARY KEY (instance_id, position_id))
WITH CLUSTERING ORDER BY (position_id ASC);

CREATE TABLE open_positions_by_strategy (strategy_id TEXT,
    instance_id TEXT,
    position_id TEXT,
    account_id TEXT,
    broker_id TEXT,
    symbol TEXT,
    direction TEXT,
    max_size DOUBLE,
    size DOUBLE,
    nbr_trades DOUBLE,
    open_time TIMESTAMP,
    duration DOUBLE,
    commission DOUBLE,
    swap DOUBLE,
    gross_profit DOUBLE,
    profit DOUBLE,
    initial_size DOUBLE,
    expected_profit DOUBLE,
    units_base_ccy DOUBLE,
    units_quote_ccy DOUBLE,
    margin_used DOUBLE,
    margin_next DOUBLE,
    margin_used_next DOUBLE,
    weight_pct DOUBLE,
    net_open_positions_eur DOUBLE,
    gross_open_positions_eur DOUBLE,
    net_open_positions_usd DOUBLE,
    gross_open_positions_usd DOUBLE,
    PRIMARY KEY (strategy_id, instance_id, position_id))
WITH CLUSTERING ORDER BY (instance_id ASC, position_id ASC);

CREATE TABLE critical_variables_by_instance_id_instrument (instance_id TEXT,
    instrument TEXT,
    strategy_id TEXT,
    critical_variables MAP<TEXT, TEXT>,
    last_update TIMESTAMP,
    PRIMARY KEY (instance_id, instrument));
